{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAIaA,G,MAAO,SAACC,GAAD,OAEnB,yBAAKC,UAAU,kBACd,yBACCC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEJ,gCAAOL,EAAMI,QAAQE,MACrB,+BAAMN,EAAMI,QAAQG,MAApB,QCPWC,G,MAAW,SAAAR,GAAK,OAE7B,yBAAKC,UAAU,aAEZD,EAAMS,SAASC,IAAI,SAAAN,GAAO,OAE3B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,MAJlC,OCFaQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,2BAAOb,UAAY,SAClBc,KAAK,SACNF,YAAaA,EACbG,SAAUF,MCsCGG,G,kBAzCd,aAAc,IAAD,8BACZ,+CAgBFH,aAAe,SAACI,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfpC,EAAKC,MAAQ,CAEZd,SAAU,GACVW,YAAc,IANH,E,iFAWM,IAAD,OAClBI,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,Q,+BAM/B,IAAD,EAEuBC,KAAKN,MAA7Bd,EAFC,EAEDA,SAASW,EAFR,EAEQA,YACTU,EAAiBrB,EAASsB,OAAO,SAAA3B,GAAO,OAC7CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,iBAEjD,OACC,yBAAK/B,UAAU,OACf,gDACC,kBAAC,EAAD,CACCY,YAAY,kBACZC,aAAgBe,KAAKf,eAEtB,kBAAC,EAAD,CAAUL,SAAUqB,S,GAlCNI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.e6078771.chunk.js","sourcesContent":["import React from 'react' ;\n\nimport './card.styles.css'\n\nexport const Card = (props) => (\n\t\t\n\t<div className='card-container'>\n\t\t<img \n\t\t\talt='monster'\n\t\t\tsrc={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n\t\t/>\n\t\t<h2> { props.monster.name }</h2>\n\t\t<p> { props.monster.email } </p>\n\t\t\n\t\n\t</div>\n\t\n)\n","import React from 'react' ;\nimport {Card} from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList = props => (\n\t\n<div className=\"card-list\">\n\t\t\t\t\n\t\t{props.monsters.map(monster =>(\n\t\t\n\t\t<Card key={monster.id} monster={monster}/>\t\n\t\t\n))}\t</div>\n\t\n)\n\n\n","import React from 'react';\n\nimport './search-box.styles.css';\n\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\t\t<input className = 'search'\n\t\t\ttype='search'\n\t\tplaceholder={placeholder} \n\t\tonChange={handleChange}/>\n)","import React ,{Component} from 'react';\nimport {CardList} from \"./component/card-list/card-list.component\"\nimport {SearchBox} from './component/search-box/search-box.component'\nimport './App.css';\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\t\n\t\tthis.state = {\n\t\t\t\n\t\t\tmonsters: [ ],\n\t\t\tsearchField : ''\n\t\t}\n\t\t\t\n\t\t}\n\ncomponentDidMount(){\n\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t.then(response => response.json())\n\t.then(users => this.setState({monsters: users}));\n}\n\t\nhandleChange = (e)=> {\n\tthis.setState({searchField: e.target.value});\n}\n\trender(){\n\t\t\n\t\tconst{monsters,searchField} = this.state;\n\t\tconst filterMonsters = monsters.filter(monster => \n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t\t<SearchBox \n\t\t\t\t\tplaceholder='search monsters' \n\t\t\t\t\thandleChange = {this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<CardList monsters={filterMonsters}/>\n\t\t\t\t\t\t\n\t\t\t</div>\n\t\t)\n\t\t\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}